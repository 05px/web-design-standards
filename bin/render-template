#!/usr/bin/env node
'use strict';

const yargs = require('yargs')
  .option('from', {
    description: 'the template base directory',
    default: './src/template'
  })
  .option('to', {
    description: 'where to write interpolated files',
    default: './dist/html'
  });

const options = yargs.argv;
if (options.help) {
  return yargs.showHelp();
}


const Path = require('path');
const fs = require('fs');
const nunjucks = require('nunjucks');

const loader = new nunjucks.FileSystemLoader(options.from);
const env = new nunjucks.Environment(loader, options);

const ctx = (typeof options.context === 'string')
  ? JSON.parse(fs.readFileSync(options.context))
  : options.context || {};

const templates = options._;
const tasks = templates.map(template => {
  console.warn('rendering: "%s"', template);
  return new Promise((resolve, reject) => {
    env.render(template, ctx, (error, result) => {
      if (error) {
        console.error('error rendering "%s":', template, error.message);
        return reject(error);
      }
      const filename = Path.join(options.to, template);
      console.warn('writing %s â†’ %s', template, filename);
      fs.writeFile(filename, result, 'utf-8', resolve);
    });
  });
});

Promise.all(tasks)
  .then(tasks => {
    console.warn('rendered %d files', tasks.length);
  })
  .catch(error => {
    process.exit(1);
  });
